vnote_backup_file_826537664 D:/code-learning-note/03-前端资料/01-前端基础语法/02-CSS-层叠样式表.md
# CSS 层叠样式表

## 1. CSS概述
### 1.1. CSS概念

1. CSS 是层叠样式表 ( Cascading Style Sheets ) 的简称
	- **样式**：给HTML标签添加需要显示的效果
	- **层叠**：使用不同的添加方式，给同一个HTML标签添加样式，最后所有的样式都叠加到一起，共同作用于该标签。
2. CSS 是一种标记语言，属于浏览器解释型语言，可以直接由浏览器执行，不需要编译
3. CSS 是用来表现HTML或XML的标记语言
4. CSS 是由W3C的CSS工作组发布推荐和维护的
5. 运用CSS样式可以让页面变得美观
6. CSS语法由三部分构成：选择器、属性和值：`selector {property: value}`

### 1.2. CSS美化相对HTML美化的好处

1. 功能上更加强大，可以实现HTML中无法实现的美化功能
2. 降低了HTML与CSS代码耦合度，将数据的显示与数据的装饰进行了分离
    - HTML：用于网页的结构创建
    - CSS：用于网页的美化，分工更加明确

### 1.3. CSS的编写规范

- 属性名：所有单词全部小写，如果一个属性名有多个单词，单词之间使用 (`-`) 分隔
- 属性值：所有的属性值都是固定的，每个属性名可以有多个属性值，样式名与样式值之间使用冒号 (`:`) 隔开
- 多个样式之间：使用分号 (`;`) 分隔
- 注释：`/**/`，类似java中的多行注释

### 1.4. div概述

- `<div></div>`标签是HTML一个普通标签，进行区域划分。特性：独自占一行。独自不能实现复杂效果。必须结合CSS样式进行渲染。
- div通常是其是块标签
    - `<div>`可定义文档中的分区或节（division/section）。
    - `<div>`标签可以把文档分割为独立的，不同的部分。它可以用作严格的组织工具，并且不使用任何格式与其关联。
    - 如果用id或class来标记`<div>`，那么该标签的作用会变得更加有效。

### 1.5. 引入CSS样式表（CSS代码的位置）
#### 1.5.1. 行内样式

出现在标签的一行中，以**标签的style属性的方式**存在，只对这一个标签起作用。多个样式使用`;`分隔

```html
<h3 style="color:green">学生成绩</h3>
```

#### 1.5.2. 内部样式

- 以**style标签**的方式存在于网页中，对网页中的指定的标签起作用。一般是**在head标签中**，多个样式使用`;`分隔
- 语法

```html
<style type="text/css">
	css选择器
</style>
```

- 示例

```html
<head>
	<meta charset="UTF-8">
	<title></title>
	<style type="text/css">
		td {
			text-align: center;
		}
	</style>
</head>
```

#### 1.5.3. 外部样式

- 开发常用的是外部样式。
- 样式是以css文件的方式编写，与HTML分开。使用时外部样式需要导入到HTML中

1. **引入方式一(常用的方式)**

```html
<link rel="stylesheet" href="css/xx.css" type="text/css" />
```

> 注意：`<link>` 是个单标签哦！！！不需要写在style标签中

该语法中，link标签需要放在head头部标签中，并且必须指定link标签的三个属性，具体如下：

- **rel**: CSS与HTML之间的关系是样式表，这个属性必须加，不然没有效果，取值：stylesheet
- **href**: 定义所链接外部样式表文件的URL（即要导入的CSS文件的地址），可以是相对路径，也可以是绝对路径。
- **type**: 表示文本文件的类型，MIME类型，指定这是一个CSS文件类型，在这里需要指定为“text/CSS”，表示链接的外部文件为CSS样式表。

2. **引入方式二(使用较少)**，写在style标签中。

```html
<style type="text/css">
	@import url("css/out.css");
</style>
```

3. **优先级**
	**就近原则**，后面的样式会将前面的<u>同名</u>样式覆盖。

*写到CSS文件的选择器不需要放到`<style>`标签中*

#### 1.5.4. 三种样式表总结

|   样式表   |          优点          |          缺点          |   使用情况    |     控制范围      |
| --------- | --------------------- | --------------------- | ------------ | ---------------- |
| 行内样式表 | 书写方便，权重高        | 没有实现样式和结构相分离 | 较少          | 控制一个标签（少） |
| 内部样式表 | 部分结构和样式相分离     | 没有彻底分离            | 较多          | 控制一个页面（中） |
| 外部样式表 | 完全实现结构和样式相分离 | 需要引入               | 最多，强烈推荐 | 控制整个站点（多） |


## 2. CSS 的选择器
### 2.1. 选择器的作用

对HTML中的元素使用样式之前，先选中要操作的元素。选择器作用就是用来选中要操作的元素。

### 2.2. 选择器基础语法

语法格式:

```CSS
选择器名 {
	样式名1：样式值;
	样式名2：样式值;
	样式名3：样式值;
	......
}
```

### 2.3. 基本选择器（重点）

一般定义在`<head>`标签中，`<style>`标签内

#### 2.3.1. 标签选择器

- **作用**：通过标签的名字选中元素
- **语法格式**：

```css
/* 语法格式 */
标签名 {
	样式名1：样式值;
	样式名2：样式值;
	......
}
/* 示例 */
h3 {
	color: green;
}
```

- **细节**：以标签的名字做为选择器，同时选中所有相同的标签

#### 2.3.2. 类选择器

- **作用**：通过分类名选中元素
- **使用类选择器前提**：使用类选择器之前，首先要给元素进行分类。给这些标签添加一个class属性
- **命名**：**类名不能以数字开头**
- **语法格式**:**（注意“.”不能少）**

```css
/* 类选择器格式 */
.类名 {
}
```

```html
<!-- 类选择器示例 -->
<head>
	<meta charset="UTF-8">
	<title></title>
	<style>
		.first {
			color:yellow;
		}
	</style>
</head>
<body>
	<div class="first">
		这是一个div
	</div>
</body>
```

- **细节**：
    1. 分类的命名：不能以数字开头
    2. 优先级：类选择器 > 标签选择器

#### 2.3.3. ID选择器

- **作用**：通过元素的ID属性来选择元素
- **使用ID选择器的前提**：先给元素添加id的属性
- **细节唯一**：建议id属性唯一，在一个网页中最好不要出现同名的id
- **ID选择器语法格式**:

```css
/* id选择器语法格式 */
#id名 {
}
```

```html
<!-- ID选择器示例 -->
<head>
	<meta charset="UTF-8">
	<title></title>
	<style>
		/* id选择器 */
		#p1{
			color: red;
		}
	</style>
</head>
<body>
	<!-- 使用了三种选择器，显示id的效果 -->
	<p id="p1" class="first">这是第三段</p>
</body>
```

#### 2.3.4. 三种选择器的优先级

**优先级：id选择器 > 类选择器 > 标签选择器**

三种选择器综合案例

```html
<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<title></title>
		<style>
			/* 使用类选择器 */
			.first {
				color:yellow;
			}
			/* 标签选择器 */
			p{
				color: blue;
			}
			/* id选择器 */
			#p1{
				color: red;
			}
		</style>
	</head>
	<body>
		<!-- 优先级： id选择器>类选择器>标签选择器 -->
		<!-- 使用了id和标签选择器，显示id的效果 -->
		<p id="p1">这是第一段</p>
		<!-- 使用了标签选择器 -->
		<p>这是第二段</p>
		<!-- 使用了三种选择器，显示id的效果 -->
		<p id="p1" class="first">这是第三段</p>
		<!-- 定义div块，显示类选择器的效果 -->
		<div class="first">
			这是一个div
		</div>
	</body>
</html>
```

### 2.4. CSS复合选择器（扩展选择器）

#### 2.4.1. 交集选择器

交集选择器由两个选择器构成，其中第一个为标签选择器，第二个为class选择器，两个选择器之间不能有空格，如`h3.special`。

```css
p.one { }   /* 选择的是： 类名为 .one 的段落标签。*/
```

> 用的相对来说比较少，不太建议使用。

#### 2.4.2. 并集选择器（多个样式设置）

并集选择器（CSS选择器分组）是各个选择器通过<font color=red>**逗号**</font>连接而成的，任何形式的选择器（包括**标签选择器**、**class类选择器**、**ID选择器**等），都可以作为并集选择器的一部分。如果某些选择器定义的样式完全相同，或部分相同，就可以利用并集选择器为它们定义相同的CSS样式。

```css
.class1,.class2,#ID,p,div, ...{
}
/* 一般都会将多个选择器换行编写 */

.one,
p,
#test { color: #F00; }  /* 表示 .one 和 p 和 #test 这三个选择器都会执行颜色为红色。  通常用于集体声明。*/
```

#### 2.4.3. 层级选择器(后代选择器\包含选择器)

后代选择器又称为包含选择器，用来选择元素或元素组的后代，其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。通过父选择器，选择它下面的子孙元素。子孙都可以这么选择。 或者说，它能选择父选择器下任何包含在内的标签。

```css
/* 语法格式 */
父选择器 子选择器 {
}
```

#### 2.4.4. 子元素选择器

子元素选择器只能选择作为某元素的所有子元素。其写法就是把父级标签写在前面，子级标签写在后面，中间跟一个 `>` 进行连接，<font color=red>**注意：符号左右两侧各保留一个空格**</font>。

```css
/* 示例说明： h3标签一定是在demo类标签内（亲儿子）。类名为demo元素包含着h3标签，不包含外面 */
.demo > h3 {
    color: red;
}
```


#### 2.4.5. 属性选择器

选取标签带有某些特殊属性的选择器，称为属性选择器，即根据指定的标签包含指定的属性去改变样式。**语法：标签名后使用中括号`[]`包含指定的属性**

- 第1种：标签有某个属性名

```css
标签名[属性名] {
}
```

- 第2种：标签有某个属性，并且等于指定的值

```css
标签名[属性名="属性值"] {
}
```

- 其他：标签有某个属性，并且值某个部分符合要求

```css
/* 获取到拥有该属性的元素 */
div[class^=font] { /*  class^=font 表示 font 开始位置就行了 */
    color: pink;
}
div[class$=footer] { /*  class$=footer 表示 footer 结束位置就行了 */
    color: skyblue;
}
div[class*=tao] { /* class*=tao  *=  表示tao 在任意位置都可以 */
    color: green;
}
```

#### 2.4.6. 伪类选择器
##### 2.4.6.1. 作用与语法格式

- 作用：一个标签在不同的操作状态下呈现不同的样式
- 语法格式(注意冒号“ : ”)，例如：`a:link {  }`

##### 2.4.6.2. 链接伪类选择器

- `a:link`：正常状态，未访问的链接
- `a:visited`：访问过的状态
- `a:hover`：鼠标悬浮状态
- `a:active`：正在激活状态，鼠标按下，未放开时

> 注：在编写链接伪类选择器时，需要注意其编写的顺序，link --> visited --> hover --> active。如果不按顺序编写，可能会出现样式无效的结果

##### 2.4.6.3. 文本框得到焦点伪类选择器

- `:focus`焦点：光标在文本框中

##### 2.4.6.4. 结构(位置)伪类选择器（CSS3)

- `:first-child`：选取属于其父元素的首个子元素的指定选择器
- `:last-child`：选取属于其父元素的最后一个子元素的指定选择器
- `:nth-child(n)`： 匹配属于其父元素的第 N 个子元素，不论元素的类型
- `:nth-last-child(n)`：选择器匹配属于其元素的第 N 个子元素的每个元素，不论元素的类型，从最后一个子元素开始计数。

> n 可以是数字、关键词或公式

```css
li:first-child { /*  选择第一个孩子 */
    color: pink;
}
li:last-child {   /* 最后一个孩子 */
    color: purple;
}
li:nth-child(4) {   /* 选择第4个孩子  n  代表 第几个的意思 */
    color: skyblue;
}
```

##### 2.4.6.5. 目标伪类选择器(CSS3)

- `:target`：目标伪类选择器，选择器可用于选取当前活动的目标元素

```css
:target {
    color: red;
    font-size: 30px;
}
```

#### 2.4.7. 伪元素选择器（CSS3)

- `E::first-letter`：文本的第一个单词或字（如中文、日文、韩文等）
- `E::first-line`：文本第一行，如果缩小浏览器，换行后的那部分文本则无效
- `E::selection`：可改变选中文本的样式

```css
p::first-letter {
    font-size: 20px;
    color: hotpink;
}

/* 首行特殊样式 */
p::first-line {
    color: skyblue;
}

p::selection {
    /* font-size: 50px; */
    color: orange;
}
```

- `E::before`和`E::after`：在E元素内部的开始位置和结束位创建一个元素，该元素为行内元素，且必须要结合content属性使用。

```css
div::befor {
    content:"开始";
}
div::after {
    content:"结束";
}
```

> `E:after`、`E:before` 在旧版本里是伪元素，CSS3的规范里“`:`”用来表示伪类，“`::`”用来表示伪元素，但是在高版本浏览器下`E:after`、`E:before`会被自动识别为`E::after`、`E::before`，这样做的目的是用来做兼容处理。

#### 2.4.8. 伪元素选择器与伪类选择器的区别

##### 2.4.8.1. css3为了区分伪类和伪元素，伪元素采用双冒号写法

- 【常见伪类】 `:hover`,`:link`,`:active`,`:target`,`:not()`,`:focus`
- 【常见伪元素】 `::first-letter`,`::first-line`,`::before`,`::after`,`::selection`
- `::before`和`::after`下特有的content，用于在css渲染中向元素逻辑上的头部或尾部添加内容。
- 这些添加不会出现在DOM中，不会改变文档内容，不可复制，仅仅是在css渲染层加入。
- 所以不要用`:before`或`:after`展示有实际意义的内容，尽量使用它们显示修饰性内容，例如图标。
- `::before`和`::after`必须配合content属性来使用，content用来定义插入的内容，content必须有值，至少是空。默认情况下，伪类元素的`display`是默认值`inline`，可以通过设置`display:block`来改变其显示

##### 2.4.8.2. `::` 与 `:` 的写法区别

- **相同点**
    - 都可以用来表示伪类对象，用来设置对象前的内容
    - `:before`和`::before`写法是等效的
- **不同点**
    - `:before`是CSS2的写法，`::before`是CSS3的写法
    - `:before`的兼容性要比`::before`好 ，不过在H5开发中建议使用`::before`比较好

#### 2.4.9. 扩展选择器优先级

- css中权重最高的样式为行内样式，就是以`style=" "`方式直接加入到HTML标签内的样式，其在css优先级中具有最高的权重。
- 其次是ID选择器，ID选择器由于每一个ID在代码中只能出现一次，和唯一指向性，具有第二高的权重。
- 权重处于第三的是类、伪类和属性选择器。

## 3. CSS常用的样式

### 3.1. Text（文本样式）[待补充整理]

| 功能     | 属性名          | 属性取值与作用                                               |
| -------- | --------------- | ------------------------------------------------------------ |
| 颜色     | color           | 颜色常量，如：red<br />使用十六进制，如：#123<br />使用RGB(红，绿，蓝)函数 |
| 设置行高 | line-height     | 单位：像素                                                   |
| 文字修饰 | text-decoration | **underline**：<u>下划线</u><br />**overline**：上划线<br />**line-through**：~~删除线，中划线~~<br />**none**：正常显示的文字 |
| 文本缩进 | text-indent     | 单位：em，用于缩进文本，如果设置2em，表示缩进2个字符，无论字符的大小 |
| 文本对齐 | text-align      | **left：把文本排列到左边。默认值：由浏览器决定。**<br />**right**：把文本排列到右边。<br />**center**：把文本排列到中间。 |

> <font color=red>**使用技巧**：在只一行文字的盒子内，设定文字的行高等于盒子的高度，就可以使文字垂直居中。</font>。注：如果例子内有多行文字，则不无效

### 3.2. Fonts（文字样式）[待补充整理]

| 功能         | 属性名      | 属性取值与作用                                               |
| ------------ | ----------- | ------------------------------------------------------------ |
| 字体名       | font-family | 设置字体，本机必须要有这种字体                               |
| 设置字体大小 | font-size   | 单位：像素                                                   |
| 设置字体样式 | font-style  | 字体设置为斜体<br />**italic**：浏览器会显示一个斜体的字体样式<br />**normal**：默认值。浏览器显示一个标准的字体样式。 |
| 设置字体粗细 | font-weight | **bolder**：加粗<br />**normal**：默认值                     |

建议：如果能使用样式，就不要使用标签。



### 3.3. Backgrounds（背景样式）

CSS 背景属性用于定义HTML元素添加背景颜色和背景图片，以及来进行图片设置。

#### 3.3.1. Backgrounds相关属性

|         属性名         |      作用       |
| --------------------- | -------------- |
| background-color      | 背景颜色        |
| background-image      | 背景图片地址     |
| background-repeat     | 平铺方式        |
| background-position   | 背景位置        |
| background-attachment | 背景固定还是滚动 |

**背景的合写（复合属性）**

```css
background:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置
```


|      功能       |         属性名         |                                                                                  属性取值与作用                                                                                   |
| -------------- | --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| 背景色          | background-color      | 1.颜色常量，如：red<br />2.使用十六进制，如：#FF0<br />3.使用RGB(红,绿,蓝)每个颜色取值是0~255                                                                                         |
| 背景图片        | background-image      | `url(图片文件)                                                                                                                                                                   `                                                    |
| 平铺方式        | background-repeat     | **repeat**：默认。背景图像将在垂直方向和水平方向重复。<br />**repeat-x**：背景图像将在水平方向重复。<br />**repeat-y**：背景图像将在垂直方向重复。<br />**no-repeat**：背景图像将仅显示一次。 |
| 背景位置        | background-position   | 默认值：`left top                                                                                                                                                                ` |
| 背景固定还是滚动 | background-attachment |                                                                                                                                                                                 |

#### 3.3.2. 背景图片(background-image)

语法：

```css
background-image : none | url(图片url或者相对路径);
```

参数：

- `none`：无背景图（默认的）
- `url`：使用绝对或相对地址指定背景图像

`background-image` 属性允许指定一个图片展示在背景中（只有CSS3才可以多背景）可以和 `background-color` 连用。如果图片不重复地话，图片覆盖不到地地方都会被背景色填充。如果有背景图片平铺，则会覆盖背景颜色。

> 小技巧：提倡背景图片后面的地址，url不要加引号。

#### 3.3.3. 背景平铺（background-repeat）




### 3.4. 其他样式
#### 3.4.1. 光标样式

| 功能                                                         | 属性名 | 属性取值与作用                                               |
| ------------------------------------------------------------ | ------ | ------------------------------------------------------------ |
| cursor（光标样式）：属性可规定当指向某元素之上时被显示的指针类型 | cursor | **default**：默认光标（通常是一个箭头）<br />**crosshair**：光标呈现为十字线。<br />**pointer**：光标呈现为指示某个链接的指针（一只手） |

#### 3.4.2. css 下长连续字母或数据不换行解决方法

css 下长连续字母或数据不换行解决方法,css字母自动换行,css数字自动换行

- `word-wrap`用来控制换行，有以下两种取值
    - normal
    - break-word（此值用来强制换行，内容将在边界内换行，中文没有任何问题，英文语句也没问题。但是对于长串的英文，就不起作用。）
- `word-break`用来控制断词，有以下三种取值
    - normal
    - break-all（是断开单词。在单词到边界时，下个字母自动到下一行。主要解决了长串英文的问题。）
    - keep-all（是指Chinese, Japanese, and Korean不断词，一句话一行，可以用来排列古诗哟~）

【解决方法】可以在CSS中加入

```css
word-wrap: break-word;
word-break: break-all;
```

## 4. CSS选择器和常用样式案例

![CSS样式案例](images/20190702100652030_21340.png)

- 需求：
1. body全文字体大小14px; 颜色：#333，行高30px
2. 诗放在div的层中，宽400px
3. 标题放在h1中，文字大小18px，颜色#06F，居中对齐
4. 每段文字缩进2em（em是一个相对度量单位，相当于缩进2个字）
5. 段中的行高是22px
6. "胸怀中满溢着幸福，只因你就在我眼前",加粗，倾斜，蓝色，鼠标移上去指针变成手的形状。
7. 最后一段，颜色#390; 下划线，鼠标移上去指针变化。
8. 美字加粗，颜色color:#F36，大小18px;
9. 文/席慕容，三个字，12px，颜色#999，不加粗

```html
<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<title>诗歌排版</title>
		<!--使用外部样式-->
		<link rel="stylesheet" href="../css/Day29Test01_02.css" type="text/css" />
	</head>
	<body>
		<div>
			<h1>初相遇&nbsp;&nbsp;<span>文/席慕容</span></h1>
			<p><sanp id="mei">美</sanp>丽的梦和美丽的诗一样，都是可遇而不可求的，常常在最没能料到的时刻里出现。</p>
			<p>
				我喜欢那样的梦，在梦里，一切都可以重新开始，一切都可以慢慢解释，心里甚至还能感觉到，
				所有被浪费的时光竟然都能重回时的狂喜与感激。<span class="blue">胸怀中满溢着幸福，只因你就在我眼前，</span>对我微笑，一如当年。
			</p>
			<p id="last">
				我喜欢那样的梦，明明知道你已为我跋涉千里，却又觉得芳草鲜美，落落英缤纷，好像你我才初相遇。
			</p>
		</div>
	</body>
</html>
```

```css
/* 标签选择器 */
body{
	font-size: 14px;
	color: #333;
	line-heiht: 30px;
	font-family:Verdana, Arial, Helvetica, sans-serif;
}

div{
	width: 400px;
}

h1{
	font-size: 18px;
	color: #06F;
	text-align: center;
}

p{
	text-indent: 2em;
	line-height: 22px;
}

/* 类选择器 */
.blue{
	font-size:16px;
	font-weight: bolder;
	font-style: italic;
	color: blue;
	cursor:pointer;
}


/* id选择器 */
#last{
	color: #390;
	text-decoration: underline;
	cursor: crosshair;
}

#mei{
	color: #F36;
	font-size: 18px;
}

/* 使用层级选择器 */
h1 span{
	font-size: 12px;
	color: #999;
	font-style: normal;
}
```

## 5. 盒子模型（CSS重点）

**CSS就三个大模块：盒子模型、浮动、定位，其余的都是细节。**

### 5.1. 盒子模型概念

所谓盒子模型就是把HTML页面中的元素看作是一个矩形的盒子，也就是一个盛装内容的容器。每个矩形都由元素的内容（content）、内边距（padding）、边框（border）和外边距（margin）组成。

看透网页布局的本质：把网页元素比如文字图片等等，放入盒子里面，然后利用CSS摆放盒子的过程，就是网页布局。

### 5.2. 盒子模型图解（Box Model）

网页元素盒子模型的各个属性图

![](images/20190702101222142_17072.jpg)

所有的文档元素（标签）都会生成一个矩形框，成为元素框（element box），它描述了一个文档元素再网页布局汇总所占的位置大小。因此，<font color=red>**每个盒子除了有自己大小和位置外，还影响着其他盒子的大小和位置**</font>

### 5.3. 盒子属性汇总表

|  属性   |                   作用                   |
| :-----: | --------------------------------------- |
| border  | 盒子边框                                 |
|  width  | 盒子宽度，**随着内部的变化，宽和高会撑大** |
| height  | 盒子高度                                 |
| margin  | 外边距                                   |
| padding | 内边距                                   |

### 5.4. 盒子边框属性（border）

#### 5.4.1. 边框样式属性汇总表

|   作用   |     属性      |
| :------: | :-----------: |
| 边框线型 | border-style  |
| 边框宽度 | border-width  |
| 边框颜色 | border-color  |
| 边框圆角 | border-radius |

#### 5.4.2. 单独设置边框属性

```css
选择器 {
    /* 边框属性—设置边框宽度 */
    border-width: 1px;
    /* 边框属性—设置边框样式 */
    border-style: none || solid || dashed || dotted || double;
    /* 边框属性—设置边框颜色 */
    border-color: red;
}
```

`border-style`边框样式属性，用于定义页面中边框的风格，常用属性值如下：

- `none`：没有边框即忽略所有边框的宽度（默认值）
- `solid`：边框为单实线(最为常用的)
- `dashed`：边框为虚线
- `dotted`：边框为点线
- `double`：边框为双实线

#### 5.4.3. 边框属性汇总写法

```css
/* 注意：多个值中间以空格隔开 */
选择器 {
    boder: 粗细(border-width) 线形(border-style) 颜色(border-color);
}
```

#### 5.4.4. 盒子边框常用写法汇总

| 设置内容     | 样式属性                                                                                                 | 常用属性值                                                     |
| :-----------: | ------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------- |
| 上边框      | border-top-style:样式; border-top-width:宽度;border-top-color:颜色;border-top:宽度 样式 颜色;              |                                                               |
| 下边框      | border-bottom-style:样式;border- bottom-width:宽度;border- bottom-color:颜色;border-bottom:宽度 样式 颜色; |                                                               |
| 左边框      | border-left-style:样式; border-left-width:宽度;border-left-color:颜色;border-left:宽度 样式 颜色;          |                                                               |
| 右边框      | border-right-style:样式;border-right-width:宽度;border-right-color:颜色;border-right:宽度 样式 颜色;       |                                                               |
| 样式综合设置 | border-style:上边 [右边 下边 左边];                                                                       | none无（默认）、solid单实线、dashed虚线、dotted点线、double双实线 |
| 宽度综合设置 | border-width:上边 [右边 下边 左边];                                                                       | 像素值                                                        |
| 颜色综合设置 | border-color:上边 [右边 下边 左边];                                                                       | 颜色值、#十六进制、rgb(r,g,b)、rgb(r%,g%,b%)                    |
| 边框综合设置 | border:四边宽度 四边样式 四边颜色;                                                                         |                                                               |

#### 5.4.5. 圆角边框(CSS3)

语法格式：(注：属性值中间以空格隔开)

```css
border-radius: 左上角 右上角 右下角 左下角;
```

示例

```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>测试圆角边框</title>
    <style>
      div {
        width: 200px;
        height: 200px;
        border: 1px solid red;
      }
        /* 结构伪类选择器 选亲兄弟 */
      div:first-child {
        border-radius: 10px; /*  一个数值表示4个角都是相同的 10px 的弧度 */
      }

      div:nth-child(2) {
        /*border-radius: 100px;    取宽度和高度一半，则会变成一个圆形 */
        border-radius: 50%;  /*  50% 即取宽度和高度一半，则会变成一个圆形 */
      }

      div:nth-child(3) {
        border-radius: 10px 40px; /* 左上角  和 右下角  是 10px  右上角 左下角 40 对角线 */
      }

      div:nth-child(4) {
        border-radius: 10px 40px 80px; /* 左上角 10  右上角 左下角 40  右下角80 */
      }
      div:nth-child(5) {
        border-radius: 10px 40px 80px 100px; /* 左上角 10  右上角 40 右下角 80  左下角 100 */
      }
      div:nth-child(6) {
        border-radius: 100px;
        height: 100px;
      }
      div:nth-child(7) {
        border-radius: 100px 0;
      }
    </style>
  </head>
  <body>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
  </body>
</html>
```

#### 5.4.6. 表格（table标签）的细线边框（扩展）

在学习html的table标签时，设置表格的单元格叠加后边框会很粗

只要设置`border-collapse:collapse;`属性，就表示边框合并在一起。

### 5.5. 内边距（padding）

`padding`属性用于设置内边距。是指边框与内容之间的距离。分别设置上、右、下、左内边距属性如下：

- `padding-top`：上内边距
- `padding-right`：右内边距
- `padding-bottom`：下内边距
- `padding-left`：左内边距

也可以直接设置`padding`属性，其值的个数可以是1~4个，中间以空格隔开，分别代表设置的内容如下：

| 值的个数 |                                              代表设置的内边距方向                                              |
| ------- | ----------------------------------------------------------------------------------------------------------- |
| 1       | `padding：上下左右边距` 比如padding: 3px; 表示上下左右都是3像素                                                  |
| 2       | `padding: 上下边距 左右边距` 比如 padding: 3px 5px; 表示 上下3像素 左右 5像素                                    |
| 3       | `padding：上边距 左右边距 下边距` 比如 padding: 3px 5px 10px; 表示 上是3像素 左右是5像素 下是10像素                |
| 4       | `padding:上内边距 右内边距 下内边距 左内边距` 比如: padding: 3px 5px 10px 15px; 表示 上3px 右是5px 下 10px 左15px |

> 注：4个值设置的规律是从上开始，按顺时针方向设置

### 5.6. 外边距（margin）

`margin`属性用于设置外边距。设置外边距会在元素之间创建“空白”，这段空白通常不能放置其他内容。

#### 5.6.1. 一条语句设置四边值写

|          外边距的写法          | 含义                  |
| :----------------------------: | --------------------- |
|        `margin: 10px;`         | 设置：四边            |
|      `margin: 10px 20px;`      | 分别设置：上下 左右   |
|   `margin: 10px 20px 30px;`    | 分别设置：上 左右 下  |
| `margin: 10px 20px 30px 40px;` | 分别设置：上 右 下 左 |

#### 5.6.2. 每条语句设置一边值

|      外边距的写法      |   含义   |      内边距的写法       |   含义   |
| :--------------------: | :------: | :---------------------: | :------: |
|  `margin-top: 10px;`   | 上外边距 |  `padding-top: 10px;`   | 上内边距 |
|  `margin-left: 10px;`  | 左外边距 |  `padding-left: 10px;`  | 左内边距 |
| `margin-bottom: 10px;` | 下外边距 | `padding-bottom: 10px;` | 下内边距 |
| `margin-right: 10px;`  | 右外边距 | `padding-right: 10px;`  | 右内边距 |

### 5.7. 关于块级元素的居中

语法：`margin:auto`

### 5.8. display属性取值

- `inline`：将块级元素转成内联元素
- `block`：将内联元素转成块级元素
- `none`：将元素隐藏

## 6. CSS书写规范

### 6.1. 空格规范

【强制】 `选择器` 与 `{` 之间必须包含空格。

```css
.selector { }
```

【强制】 `属性名` 与之后的 `:` 之间不允许包含空格， `:` 与 `属性值` 之间必须包含空格。

```css
font-size: 12px;
```

### 6.2. 选择器规范

【强制】 当一个 rule 包含多个 selector 时，每个选择器声明必须独占一行。

```css
/* good */
.post,
.page,
.comment {
    line-height: 1.5;
}

/* bad */
.post, .page, .comment {
    line-height: 1.5;
}
```

【建议】 选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。

```css
/* good */
#username input {}
.comment .avatar {}

/* bad */
.page .header .login #username input {}
.comment div * {}
```

### 6.3. 属性规范

【强制】 属性定义必须另起一行。

```css
/* good */
.selector {
    margin: 0;
    padding: 0;
}

/* bad */
.selector { margin: 0; padding: 0; }
```

【强制】 属性定义后必须以分号结尾。

```css
/* good */
.selector {
    margin: 0;
}

/* bad */
.selector {
    margin: 0
}
```


